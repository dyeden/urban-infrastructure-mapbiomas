import ee
ee.Initialize()
import index_lib


hexagons = ee.FeatureCollection('users/dyedenm/mapbiomas/infraurbana_c4/examples/hexagon_urban_example')



def getBlocksList():
  return  [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
  37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
  72, 73, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109,
  111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 138, 139,
  140, 141, 142, 143, 144, 145, 147, 148, 149, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170,
  171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200,
  201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227,
  228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
  253, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
  280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305,
  306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332,
  333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 359,
  360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385,
  386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
  412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437,
  438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463,
  464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490,
  491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517,
  518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548,
  549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578,
  579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608,
  609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
  638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
  667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
  696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
  725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
  754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
  784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800]



def getBlocksListPart(n_part):
  if n_part == 0: 
    part = [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
      37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
      72, 73, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109,
      111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 138, 139,
      140, 141, 142, 143, 144, 145, 147, 148, 149, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170,
      171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200,
    ]
  if n_part == 1:
    part = [201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227,
    228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
    253, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
    280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305,
    306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332,
    333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 359,
    ]
  if n_part == 2:
    part = [360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385,
    386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
    412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437,
    438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463,
    464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490,
    491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517,
    ]
  if n_part == 3:
    part = [518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548,
    549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578,
    579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608,
    609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
    638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
    ]
  if n_part == 4:
    part = [667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
    696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
    725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
    754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
    784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800]

  return part


def getBlocksListPartV2(n_part):
  if n_part == 0: 
    part = [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
      37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
      72, 73, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109]

  if n_part == 1: 
    part = [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 138, 139,
      140, 141, 142, 143, 144, 145, 147, 148, 149, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170,
      171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200,
    ]
  if n_part == 2:
    part = [201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227,
    228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
    253, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279]
    
  if n_part == 3:  
    part = [280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305,
    306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332,
    333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 359]

  if n_part == 4:
    part = [360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385,
    386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411,
    412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437]

  if n_part == 5:
    part = [438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463,
    464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490,
    491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517,
    ]
    
  if n_part == 6:
    part = [518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548,
    549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578]
  
  if n_part == 7:
    part = [579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608,
    609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
    638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
    ]

  if n_part == 8:
    part = [667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695,
    696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724]
  
  if n_part == 9:
    part = [725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
    754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
    784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800]

  return part

def getHexagonsBlock(block_id):
  
  return hexagons.filterMetadata('block_id', 'equals', block_id)


def getCartasList():
  return ['SG-21-Z-D', 'SH-21-X-B', 'SH-21-X-D', 'SH-22-V-C', 'SH-22-V-D', 'SG-22-V-D', 'SG-22-Y-C', 'SH-22-V-A', 'SH-22-X-A', 'SG-22-V-B', 'SG-22-X-A',
  'SG-22-X-B', 'SG-22-X-C', 'SG-22-Y-A', 'SG-22-Y-B', 'SG-22-Y-D', 'SG-22-Z-A', 'SH-22-V-B', 'SH-22-X-C', 'SG-22-Z-C', 'SE-22-X-D', 'SE-22-Y-B',
  'SE-22-Y-D', 'SE-22-Z-A', 'SE-22-Z-B', 'SE-22-Z-C', 'SE-22-Z-D', 'SE-23-Y-A', 'SF-21-X-D', 'SF-21-Z-A', 'SF-21-Z-B', 'SF-21-Z-C', 'SF-21-Z-D',
  'SF-22-V-B', 'SF-22-V-C', 'SF-22-V-D', 'SF-22-X-A', 'SF-22-X-B', 'SF-22-X-C', 'SF-22-X-D', 'SF-22-Y-A', 'SF-22-Y-B', 'SF-22-Y-C', 'SF-22-Y-D',
  'SF-22-Z-A', 'SF-22-Z-B', 'SF-22-Z-C', 'SG-21-X-B', 'SG-21-X-D', 'SG-22-V-A', 'SG-22-V-C', 'SF-23-Z-B', 'SF-23-Z-C', 'SF-23-Z-D', 'SF-24-Y-C',
  'SG-22-X-D', 'SG-22-Z-B', 'SG-22-Z-D', 'SG-23-V-A', 'SG-23-V-B', 'SG-23-V-C', 'SH-22-X-B', 'SH-22-X-D', 'SF-22-Z-D', 'SF-23-V-C', 'SF-23-Y-A',
  'SF-23-Y-B', 'SF-23-Y-C', 'SF-23-Y-D', 'SE-23-X-D', 'SE-23-Y-D', 'SE-23-Z-A', 'SE-23-Z-B', 'SE-23-Z-C', 'SE-23-Z-D', 'SE-24-V-C', 'SE-24-Y-A',
  'SE-24-Y-C', 'SF-23-V-A', 'SF-23-V-B', 'SF-23-V-D', 'SF-23-X-A', 'SF-23-X-B', 'SF-23-X-C', 'SF-23-X-D', 'SF-23-Z-A', 'SF-24-V-C', 'SF-24-Y-A',
  'SD-24-V-D', 'SD-24-X-A', 'SD-24-X-C', 'SD-24-Y-B', 'SD-24-Z-A', 'SD-24-Z-C', 'SE-24-V-B', 'SE-24-V-D', 'SE-24-X-A', 'SE-24-Y-B', 'SE-24-Y-D',
  'SF-24-V-A', 'SF-24-V-B', 'SC-24-Y-D', 'SC-24-Z-A', 'SC-24-Z-B', 'SC-24-Z-C', 'SC-24-Z-D', 'SD-23-Z-B', 'SD-23-Z-D', 'SD-24-V-B', 'SD-24-V-C',
  'SD-24-Y-A', 'SD-24-Y-C', 'SD-24-Y-D', 'SE-23-X-B', 'SE-24-V-A', 'SB-25-V-C', 'SB-25-Y-A', 'SB-25-Y-C', 'SC-24-X-B', 'SC-24-X-D', 'SC-25-V-A',
  'SC-25-V-C', 'SE-21-V-B', 'SE-21-X-A', 'SE-21-Y-B', 'SE-21-Z-A', 'SE-21-Y-D', 'SE-21-Z-C', 'SF-21-V-B', 'SD-21-Y-C', 'SD-21-Y-D', 'SD-21-Z-C', 
  'SE-21-V-A', 'SE-21-X-B', 'SE-21-X-D', 'SE-21-Z-B', 'SE-21-Z-D', 'SF-21-X-A', 'SF-21-V-D', 'SF-21-Y-B', 'SC-19-Z-C', 'SC-19-Z-A', 'SC-19-X-C',
  'SB-19-Z-A', 'SA-19-Z-C', 'SA-19-Z-A', 'SC-19-Z-B', 'SC-19-X-D', 'SC-19-X-B', 'SC-20-V-C', 'SC-20-Y-A', 'SC-20-Y-C', 'SB-20-Y-C', 'SB-19-Z-D',
  'SC-22-V-D', 'SB-19-X-B', 'SA-19-Z-D', 'SA-19-Z-B', 'SA-19-X-D', 'SA-19-X-B', 'SA-23-Z-A', 'SA-23-Z-B', 'SA-23-Z-C', 'SA-23-Z-D', 'SA-24-Y-A', 
  'SA-24-Y-C', 'SB-22-X-D', 'SB-22-Z-B', 'SB-22-Z-D', 'SB-23-V-B', 'SB-23-V-C', 'SB-23-V-D', 'SB-23-X-A', 'SB-23-X-B', 'SB-23-X-C', 'SB-23-X-D', 
  'SB-23-Y-A', 'SB-23-Y-B', 'SB-23-Y-C', 'SB-23-Y-D', 'SB-23-Z-A', 'SB-23-Z-B', 'SB-23-Z-C', 'SB-23-Z-D', 'SC-21-Y-C', 'SC-21-Y-D', 'SC-22-X-A', 
  'SC-22-X-B', 'SC-22-X-C', 'SC-22-X-D', 'SC-22-Y-B', 'SC-22-Y-D', 'SC-22-Z-A', 'SC-22-Z-B', 'SC-22-Z-C', 'SC-22-Z-D', 'SC-23-V-A', 'SC-23-V-B', 
  'SC-23-V-C', 'SC-23-V-D', 'SC-23-X-A', 'SC-23-X-B', 'SC-23-X-C', 'SC-23-X-D', 'SC-23-Y-A', 'SC-23-Y-B', 'SC-23-Y-C', 'SC-23-Y-D', 'SC-23-Z-A', 
  'SC-23-Z-B', 'SC-23-Z-C', 'SC-23-Z-D', 'SD-20-X-B', 'SD-21-V-A', 'SD-21-V-B', 'SD-21-V-C', 'SD-21-V-D', 'SD-21-X-A', 'SD-21-X-B', 'SD-21-X-C', 
  'SD-21-X-D', 'SD-21-Y-A', 'SD-21-Y-B', 'SD-21-Z-A', 'SD-21-Z-B', 'SD-21-Z-D', 'SD-22-V-B', 'SD-22-V-C', 'SD-22-V-D', 'SD-22-X-A', 'SD-22-X-B', 
  'SD-22-X-C', 'SD-22-X-D', 'SD-22-Y-A', 'SD-22-Y-B', 'SD-22-Y-C', 'SD-22-Y-D', 'SD-22-Z-A', 'SD-22-Z-B', 'SD-22-Z-C', 'SD-22-Z-D', 'SD-23-V-A', 
  'SD-23-V-B', 'SD-23-V-C', 'SD-23-V-D', 'SD-23-X-A', 'SD-23-X-B', 'SD-23-X-C', 'SD-23-X-D', 'SD-23-Y-A', 'SD-23-Y-B', 'SD-23-Y-C', 'SD-23-Y-D', 
  'SD-23-Z-A', 'SD-23-Z-C', 'SE-22-V-A', 'SE-22-V-B', 'SE-22-V-C', 'SE-22-V-D', 'SE-22-X-A', 'SE-22-X-B', 'SE-22-X-C', 'SE-22-Y-A', 'SE-22-Y-C', 
  'SE-23-V-A', 'SE-23-V-B', 'SE-23-V-C', 'SE-23-V-D', 'SE-23-X-A', 'SE-23-X-C', 'SE-23-Y-B', 'SE-23-Y-C', 'SF-21-X-B', 'SF-21-X-C', 'SF-22-V-A', 
  'SC-21-Z-C', 'SC-21-Z-A', 'SC-21-X-C', 'SC-21-Y-B', 'SC-21-Y-A', 'SC-21-V-D', 'SC-21-V-C', 'SB-21-Z-C', 'SB-21-Z-A', 'SB-21-X-C', 'SB-21-X-A', 
  'SB-21-Y-B', 'SB-21-Y-C', 'SB-21-V-A', 'SB-20-V-A', 'SA-21-Z-D', 'SA-21-Z-B', 'SA-21-Z-C', 'SA-21-Z-A', 'SA-21-X-D', 'SA-21-X-C', 'SA-21-Y-D', 
  'SA-21-Y-B', 'SA-21-Y-C', 'SA-21-Y-A', 'SA-21-V-C', 'SA-21-V-A', 'SA-20-Y-C', 'SA-20-Y-A', 'SA-20-V-C', 'NA-21-Y-C', 'NA-21-Y-A', 'NA-21-V-A', 
  'SB-23-V-A', 'SB-22-Z-C', 'SB-22-Z-A', 'SB-22-X-B', 'SB-22-X-C', 'SB-22-X-A', 'SA-23-X-C', 'SA-23-Y-D', 'SA-23-Y-B', 'SA-23-Y-C', 'SA-23-Y-A', 
  'SA-23-V-D', 'SA-23-V-B', 'SA-23-V-C', 'SA-23-V-A', 'SA-22-Z-D', 'SA-22-Z-B', 'SA-22-Z-C', 'SA-22-Z-A', 'SA-22-X-D', 'SA-22-X-B', 'SA-22-X-C', 
  'SA-22-X-A', 'SA-22-Y-D', 'SA-22-Y-B', 'SA-22-V-D', 'SA-22-V-B', 'SA-20-V-A', 'NA-22-Z-C', 'NA-22-Z-A', 'NA-22-X-C', 'NA-22-Y-D', 'NA-22-Y-B', 
  'SC-19-Y-D', 'SC-19-Y-B', 'SC-19-V-D', 'SC-19-V-B', 'SC-19-V-C', 'SC-19-V-A', 'SC-18-X-D', 'SC-18-X-B', 'SB-19-Y-D', 'SB-19-Y-B', 'SB-19-Y-C', 
  'SB-19-Y-A', 'SB-19-V-B', 'SB-19-V-A', 'SB-18-Z-D', 'SA-19-Y-D', 'SA-19-Y-B', 'SB-22-Y-B', 'SB-22-V-D', 'SC-22-Y-C', 'SC-22-Y-A', 'SC-22-V-C', 
  'SD-22-V-A', 'SC-21-Z-D', 'SC-21-Z-B', 'SC-21-X-D', 'SC-21-X-B', 'SB-21-Z-D', 'SB-21-Z-B', 'SB-21-X-B', 'SA-22-Y-C', 'SA-22-Y-A', 'SA-22-V-C', 
  'SA-22-V-A', 'NA-22-V-B', 'NA-22-V-D', 'SD-20-Z-D', 'SD-20-Z-B', 'SD-20-X-D', 'SD-20-X-A', 'SD-20-V-B', 'SC-20-Z-D', 'SC-20-Z-B', 'SC-20-Z-C', 
  'SC-20-Z-A', 'SC-20-X-D', 'SC-20-X-C', 'SC-20-X-A', 'SC-20-Y-D', 'SC-20-Y-B', 'SC-20-V-D', 'SC-20-V-B', 'SB-20-Z-D', 'SB-20-Z-C', 'SB-20-Z-A', 
  'SB-20-X-D', 'SB-20-X-B', 'SB-20-Y-D', 'SB-20-Y-B', 'SB-20-V-D', 'SB-20-V-B', 'SA-20-Z-D', 'SA-20-Z-B', 'SA-20-Z-C', 'SA-20-X-D', 'SA-20-X-B', 
  'SA-20-X-C', 'SA-20-X-A', 'SA-20-Y-D', 'NA-20-Z-D', 'NA-20-Z-B', 'NA-20-X-D', 'NA-20-X-B', 'NA-20-X-C', 'NA-20-X-A', 'NB-20-Z-D', 'SA-24-Y-B', 
  'SA-24-Y-D', 'SA-24-Z-C', 'SB-24-V-A', 'SB-24-V-B', 'SB-24-V-C', 'SB-24-V-D', 'SB-24-X-A', 'SB-24-X-B', 'SB-24-X-C', 'SB-24-X-D', 'SB-24-Y-A', 
  'SB-24-Y-B', 'SB-24-Y-C', 'SB-24-Y-D', 'SB-24-Z-A', 'SB-24-Z-B', 'SB-24-Z-C', 'SB-24-Z-D', 'SC-24-V-A', 'SC-24-V-B', 'SC-24-V-C', 'SC-24-V-D', 
  'SC-24-X-A', 'SC-24-X-C', 'SC-24-Y-A', 'SC-24-Y-B', 'SC-24-Y-C', 'SD-24-V-A', 'SH-21-X-A', 'SH-21-V-D', 'SH-21-X-C', 'SH-21-Y-B', 'SH-21-Z-A', 
  'SH-21-Z-B', 'SH-22-Y-A', 'SH-22-Y-B', 'SH-22-Z-A', 'SH-21-Z-C', 'SH-21-Z-D', 'SH-22-Y-C', 'SH-22-Y-D', 'SH-22-Z-C', 'SI-22-V-A', 'SI-22-V-B', 
  'SI-22-V-C', 'SE-20-X-B']


def getSamplesUrbanBlock(block_id, year):
  samples_urban = ee.FeatureCollection('projects/mapbiomas-workspace/AMOSTRAS/INFRAURBANA_COL4/samples_urban/samples_urban_' + str(year) + '_blk_' + str(block_id))

  samples_urban = samples_urban.map( lambda ft: ft.set("value", 1))
  
  return samples_urban

def runRandomForest(ntree, image, samples, bands):

  classifier = ee.Classifier.randomForest(**{
                    'numberOfTrees':ntree,
                    'minLeafPopulation':20
                    }) \
                    .train(**{
                      'features':samples,
                      'classProperty':'value',
                      'inputProperties':bands
                    }) \
                    .setOutputMode('PROBABILITY')

  return  image.classify(classifier)


def getSamplesNotUrban(year):
  part0 = ee.FeatureCollection('projects/mapbiomas-workspace/AMOSTRAS/INFRAURBANA_COL4/samples_notuv2/samples_noturban_' + str(year) + '_part0')
  part1 = ee.FeatureCollection('projects/mapbiomas-workspace/AMOSTRAS/INFRAURBANA_COL4/samples_notuv2/samples_noturban_' + str(year) + '_part1')
  part2 = ee.FeatureCollection('projects/mapbiomas-workspace/AMOSTRAS/INFRAURBANA_COL4/samples_notuv2/samples_noturban_' + str(year) + '_part2')
  part3 = ee.FeatureCollection('projects/mapbiomas-workspace/AMOSTRAS/INFRAURBANA_COL4/samples_notuv2/samples_noturban_' + str(year) + '_part3')
  part4 = ee.FeatureCollection('projects/mapbiomas-workspace/AMOSTRAS/INFRAURBANA_COL4/samples_notuv2/samples_noturban_' + str(year) + '_part4')
  part5 = ee.FeatureCollection('projects/mapbiomas-workspace/AMOSTRAS/INFRAURBANA_COL4/samples_notuv2/samples_noturban_' + str(year) + '_part5')
  part6 = ee.FeatureCollection('projects/mapbiomas-workspace/AMOSTRAS/INFRAURBANA_COL4/samples_notuv2/samples_noturban_' + str(year) + '_part6')
  part7 = ee.FeatureCollection('projects/mapbiomas-workspace/AMOSTRAS/INFRAURBANA_COL4/samples_notuv2/samples_noturban_' + str(year) + '_part7')
  part8 = ee.FeatureCollection('projects/mapbiomas-workspace/AMOSTRAS/INFRAURBANA_COL4/samples_notuv2/samples_noturban_' + str(year) + '_part8')
  part9 = ee.FeatureCollection('projects/mapbiomas-workspace/AMOSTRAS/INFRAURBANA_COL4/samples_notuv2/samples_noturban_' + str(year) + '_part9')


  samples = part0.merge(part1).merge(part2).merge(part3).merge(part4).merge(part5).merge(part6).merge(part7).merge(part8).merge(part9)
 
  return samples.map( lambda ft: ft.set("value", 0))


def getLandsantBlock(hexagons_block, landsat):
  def clip_landsat(ft):
    return landsat.clip(ft.geometry().buffer(100)) \
      .set("hex_id", ft.get("hex_id"))
  
  imc = hexagons_block.map(clip_landsat)
  
  return ee.ImageCollection(imc)

def landsatAddIndex(landsat):
  landsat = landsat.addBands(index_lib.getNDVI(landsat))
  landsat = landsat.addBands(index_lib.getMNDWI(landsat))
  landsat = landsat.addBands(index_lib.getEVI(landsat))
  landsat = landsat.addBands(index_lib.getNDBI(landsat))
  landsat = landsat.addBands(index_lib.getBU(landsat))
  landsat = landsat.addBands(index_lib.getUI(landsat))
  return landsat

def getListHexId(samples):

  return samples.distinct('hex_id').toList(samples.size()).map(lambda ft: ee.Feature(ft).get('hex_id'))
  
def classifyBlock(landsat_block, samples, bands):

  def classify(image):
    hex_id = ee.Number(image.get('hex_id'))
    samples_hex = ee.FeatureCollection(samples.filterMetadata('hex_id', 'equals', hex_id))
    classified = runRandomForest(20, image, samples_hex, bands)
    return classified.multiply(100).byte()

  classified_block = landsat_block.map(classify)
  
  return classified_block.mosaic()



def classifyLandsat(landsat, samples, bands):

  classified = runRandomForest(200, landsat, samples, bands)

  return classified.multiply(100).byte()
